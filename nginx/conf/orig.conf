worker_processes 1;
error_log stderr notice;
daemon off;
error_log <%= ENV["APP_ROOT"] %>/logs/error.log;
events { worker_connections 1024;}



http {
    map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
   }

   


   charset utf-8;
   log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
   resolver 8.8.8.8;
   tcp_nopush on;
   #Lua resty waf package
   lua_package_path '<%= ENV["APP_ROOT"] %>/lua-resty-waf/?.lua;;';
   lua_package_cpath '<%= ENV["APP_ROOT"] %>/lua-resty-waf/?.lua;;';

   variables_hash_max_size 1024;
   include <%= ENV["APP_ROOT"] %>/conf/mime.types;
   set_real_ip_from 127.0.0.1/8;
   real_ip_header X-Real-IP;
   port_in_redirect off;
   server_tokens off;


    init_by_lua '
        require "resty.core"
        -- require the base module
        local lua_resty_waf = require "waf"

         -- define options that will be inherited across all scopes
        lua_resty_waf.default_option("debug", true)
        lua_resty_waf.default_option("mode", "ACTIVE")

        -- perform some preloading and optimization
        lua_resty_waf.init()
    ';
    server {

       listen <%= ENV["PORT"] %>;

       lua_code_cache on;
          

        location / {
          set $forwarded_url '';
          access_by_lua_file ./route-service.lua;


          header_filter_by_lua '
            local lua_resty_waf = require "waf"

            -- note that options set in previous handlers (in the same scope)
            -- do not need to be set again
            local waf = lua_resty_waf:new()

            waf:exec()
        ';

        body_filter_by_lua '
          local lua_resty_waf = require "waf"
          local waf = lua_resty_waf:new()
          waf:exec()
        ';


        log_by_lua '
          local lua_resty_waf = require "waf"
          local waf = lua_resty_waf:new()
          -- write out any event log entries to the
          -- configured target, if applicable
          waf:write_log_events()
         ';

            default_type text/html;
        
        proxy_redirect ~^(http://[^:]+):\d+(/.+)$ $2;
        proxy_redirect / /;

        # Upgrade headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;



        proxy_pass $forwarded_url;
    }
    }
}
